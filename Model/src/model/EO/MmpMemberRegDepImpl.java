package model.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 06 17:06:33 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmpMemberRegDepImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        MemberRegDepId,
        MemberRegId,
        Name,
        FatherName,
        Dob,
        Cnic,
        Telephone,
        Mobile,
        Relation,
        Religion,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        MmpMemberReg;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int MEMBERREGDEPID = AttributesEnum.MemberRegDepId.index();
    public static final int MEMBERREGID = AttributesEnum.MemberRegId.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int FATHERNAME = AttributesEnum.FatherName.index();
    public static final int DOB = AttributesEnum.Dob.index();
    public static final int CNIC = AttributesEnum.Cnic.index();
    public static final int TELEPHONE = AttributesEnum.Telephone.index();
    public static final int MOBILE = AttributesEnum.Mobile.index();
    public static final int RELATION = AttributesEnum.Relation.index();
    public static final int RELIGION = AttributesEnum.Religion.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int MMPMEMBERREG = AttributesEnum.MmpMemberReg.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmpMemberRegDepImpl() {
    }

    /**
     * Gets the attribute value for MemberRegDepId, using the alias name MemberRegDepId.
     * @return the value of MemberRegDepId
     */
    public BigDecimal getMemberRegDepId() {
        return (BigDecimal) getAttributeInternal(MEMBERREGDEPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MemberRegDepId.
     * @param value value to set the MemberRegDepId
     */
    public void setMemberRegDepId(BigDecimal value) {
        setAttributeInternal(MEMBERREGDEPID, value);
    }

    /**
     * Gets the attribute value for MemberRegId, using the alias name MemberRegId.
     * @return the value of MemberRegId
     */
    public BigDecimal getMemberRegId() {
        return (BigDecimal) getAttributeInternal(MEMBERREGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MemberRegId.
     * @param value value to set the MemberRegId
     */
    public void setMemberRegId(BigDecimal value) {
        setAttributeInternal(MEMBERREGID, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for FatherName, using the alias name FatherName.
     * @return the value of FatherName
     */
    public String getFatherName() {
        return (String) getAttributeInternal(FATHERNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FatherName.
     * @param value value to set the FatherName
     */
    public void setFatherName(String value) {
        setAttributeInternal(FATHERNAME, value);
    }

    /**
     * Gets the attribute value for Dob, using the alias name Dob.
     * @return the value of Dob
     */
    public Timestamp getDob() {
        return (Timestamp) getAttributeInternal(DOB);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dob.
     * @param value value to set the Dob
     */
    public void setDob(Timestamp value) {
        setAttributeInternal(DOB, value);
    }

    /**
     * Gets the attribute value for Cnic, using the alias name Cnic.
     * @return the value of Cnic
     */
    public String getCnic() {
        return (String) getAttributeInternal(CNIC);
    }

    /**
     * Sets <code>value</code> as the attribute value for Cnic.
     * @param value value to set the Cnic
     */
    public void setCnic(String value) {
        setAttributeInternal(CNIC, value);
    }

    /**
     * Gets the attribute value for Telephone, using the alias name Telephone.
     * @return the value of Telephone
     */
    public String getTelephone() {
        return (String) getAttributeInternal(TELEPHONE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Telephone.
     * @param value value to set the Telephone
     */
    public void setTelephone(String value) {
        setAttributeInternal(TELEPHONE, value);
    }

    /**
     * Gets the attribute value for Mobile, using the alias name Mobile.
     * @return the value of Mobile
     */
    public String getMobile() {
        return (String) getAttributeInternal(MOBILE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Mobile.
     * @param value value to set the Mobile
     */
    public void setMobile(String value) {
        setAttributeInternal(MOBILE, value);
    }

    /**
     * Gets the attribute value for Relation, using the alias name Relation.
     * @return the value of Relation
     */
    public String getRelation() {
        return (String) getAttributeInternal(RELATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Relation.
     * @param value value to set the Relation
     */
    public void setRelation(String value) {
        setAttributeInternal(RELATION, value);
    }

    /**
     * Gets the attribute value for Religion, using the alias name Religion.
     * @return the value of Religion
     */
    public String getReligion() {
        return (String) getAttributeInternal(RELIGION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Religion.
     * @param value value to set the Religion
     */
    public void setReligion(String value) {
        setAttributeInternal(RELIGION, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * @return the associated entity MmpMemberRegImpl.
     */
    public MmpMemberRegImpl getMmpMemberReg() {
        return (MmpMemberRegImpl) getAttributeInternal(MMPMEMBERREG);
    }

    /**
     * Sets <code>value</code> as the associated entity MmpMemberRegImpl.
     */
    public void setMmpMemberReg(MmpMemberRegImpl value) {
        setAttributeInternal(MMPMEMBERREG, value);
    }

    /**
     * @param memberRegDepId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal memberRegDepId) {
        return new Key(new Object[] { memberRegDepId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.MmpMemberRegDep");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
         try {
             loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessRID"));
         } catch(Exception ex) {
             ex.printStackTrace();
         }
         
         if (operation == DML_INSERT) {
             setCreatedBy(loginId);
             setUpdatedBy(loginId);
             } else if(operation == DML_UPDATE) {
             setUpdatedBy(loginId);
         }
        super.doDML(operation, e);
    }
}

